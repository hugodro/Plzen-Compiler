#/************************************************
#* File: makefile.
#* Desc: Building definitions for the Plzen RunTime.

PROJECT= Compiler

include $(MIDFRHOME)/MakeInc/geneMake.lnx


# Plzen level 1 is implied (Java).
# level 2 is FSM.
# level 3 is SQL.
# level 2_2 is Real-Time (needs 2 to work).
PLZEN_LEVELS= -DPLZEN_LEVEL_2  -DPLZEN_LEVEL_3
BISONFLAGS= -dv


CORESRCS= actions.cpp \
	attributes.cpp \
	codeBuffer.cpp  \
	compContext.cpp \
	compileObjects.cpp \
	compiler.cpp  \
	compOptions.cpp \
	classSource.cpp \
	classFile.cpp \
	containment.cpp \
	expressions.cpp \
	importClass.cpp \
	importedObjects.cpp \
	importManager.cpp \
	inConstant.cpp \
	inAttributes.cpp \
	hashManager.cpp \
	hashBucket.cpp \
	hashElement.cpp \
	identifiers.cpp \
	instructions.cpp \
	nameSpace.cpp \
	labelStack.cpp \
	lexhelp.cpp \
	lists.cpp \
	outClassFile.cpp \
	outConstant.cpp \
	opcode.cpp \
	overloadDict.cpp \
	package.cpp \
	typing.cpp \
	variables.cpp \
	sourceFile.cpp \
	strUtils.cpp \
	spitters.cpp


PLZ_V2_1_SRCS= jvgram.ycc \
	jvgram.cpp \
	jvtokens.lc \
	jvtokens.c

#PLZ_V2_2_SRCS= extGram.ycc 
#	 extGram.cpp 
#	 extTokens.cpp 
#	 extTokens.lcc 


PLZ_V2_2_SRCS= extGram.cpp \
	 extTokens.cpp

PLZ_3_SRCS= sqlActions.cpp \
	sqlClauses.cpp \
	sqlCompContext.cpp \
	sqlExpressions.cpp \
	sqlIdentifier.cpp \
	sqlSpitters.cpp


#SRCS=$(CORESRCS) $(PLZ_V2_2_SRCS)
CPPSRCS= $(PLZ_V2_2_SRCS) $(CORESRCS) $(PLZ_3_SRCS)

TESTSRCS= plzenc.cpp


TESTOBJS= $(TESTSRCS:.cpp=.o)


# Linker Options:
LIBS= -l$(PROJECT) \
	 -lClassFile \
	-ldl -lstdc++ -lpthread
LDFLAGS= -L$(LIB_PATH)

#
# Compiler Options: 
# Use machine2 (fct table): -DUSE_FCT_MACHINE
# Threading: -DNeXT_Thread
# Debugs: -DDBGLEVEL_1 -DDBGLEVEL_2 -DDBGLEVEL_3 -DDBGLEVEL_MATH -DDEBUG_MEMORY
DEBUG_LEVELS= -DDBGLEVEL_1 -DDBGLEVEL_3 -DDEBUG_NS
CFLAGS= -g $(PLZEN_LEVELS) $(DEBUG_LEVELS)
INC:= $(INC) -I$(MFRPLZEN)/include

all: pz

lib: $(STATNAMELIB)

pz: $(TESTOBJS) $(STATNAMELIB)
	(cd $(OBJ_PATH) && \
	    $(CC) $(INC) $(CFLAGS) -o $@ $(TESTOBJS) $(LDFLAGS) $(LIBS) \
	)

#$(STATNAMELIB): $(OBJS) fakeSymbols.o
$(STATNAMELIB): $(OBJS)
	( cd $(OBJ_PATH) && \
	    $(AR) cru $@ $(OBJS) $(HACKLIBS) && \
	    $(RANLIB) $@ && \
	    cp $@ $(LIB_PATH) \
	)


extGram.cpp: extGram.ycc
	$(YACC) $(BISONFLAGS) -o$@ $<

extTokens.cpp: extTokens.lcc
	$(LEX) $(FLEXFLAGS) -o$@ $<

clean: 
	( cd $(OBJ_PATH) && \
	  rm *.o $(PRODUCTS) \
	)


